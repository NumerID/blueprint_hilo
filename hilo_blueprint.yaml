blueprint:
  name: Blueprint Hilo
  description: Blueprint permettant de configurer la température des thermostats selon le statut du sensor defi hilo. L'intégration HACS Hilo avec Home Assistant est requise pour utiliser ce blueprint.
  domain: automation
  input:
    thermostats_defi:
      name: Thermostats Défi
      description: Les thermostats à configurer lors des différents statuts du sensor.defi_hilo.
      selector:
        target:
          entity:
            domain: climate
    switchs_defi:
      name: Switchs Défi
      description: Les switchs à configurer lors des différents statuts du sensor.defi_hilo. Vous pouvez éteindre des appareils électriques lors du défi et les rallumer lors de la phase de reprise.
      selector:
        target:
          entity:
            domain: switch
      default: []    
    lights_defi:
      name: Lumières Défi
      description: Les lumières à configurer lors des différents statuts du sensor.defi_hilo. Vous pouvez éteindre des lumières lors du défi et les rallumer lors de la phase de reprise.
      selector:
        target:
          entity:
            domain: light
      default: []     
    fans_defi:
      name: Ventilateurs Défi
      description: Les ventilateurs à configurer lors des différents statuts du sensor.defi_hilo. Vous pouvez éteindre des ventilateurs lors du défi et les rallumer lors de la phase de reprise.
      selector:
        target:
          entity:
            domain: fan
      default: []    
    temperature_appreciation:
      name: Température lors des périodes d'ancrage
      description: Température à configurer lorsque le sensor.defi_hilo est dans le statut appreciation. C'est la température à à configurer lorsque le système est dans sa période d'ancrage.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius      
    temperature_pre_heat:
      name: Température de Pré Chauffage
      description: Température à configurer lorsque le sensor.defi_hilo est dans le statut pre_heat. C'est la température à monter la maison avant le début du défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius
    temperature_reduction:
      name: Température lors du défi
      description: Température à configurer lorsque le sensor.defi_hilo est dans le statut reduction. C'est la température à descendre la maison lors du début du défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius
    temperature_recovery:
      name: Température de la phase de reprise
      description: Température à configurer lorsque le sensor.defi_hilo est dans le statut recovery. C'est la température de retour à la normale progressif après le défi. Il est important de ne pas revenir tout de suite à la température normale tout de suite après le défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius
    temperature_completed:
      name: Température de retour à la normale
      description: Température à configurer lorsque le sensor.defi_hilo est dans le statut completed. C'est la température de retour à la normale.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius       
variables:  
  temperature_appreciation_state: !input temperature_appreciation
  temperature_pre_heat_state: !input temperature_pre_heat
  temperature_reduction_state: !input temperature_reduction
  temperature_recovery_state: !input temperature_recovery
  temperature_completed_state: !input temperature_completed
  appreciation_time: null
  pre_heat_time: null
  reduction_time: null
  recovery_time: null
  completed_time: null

triggers:
  - trigger: state
    entity_id: sensor.defi_hilo
    to: scheduled
    id: defi_scheduled
  - trigger: state
    entity_id: sensor.defi_hilo
    to: pre_heat
    id: defi_pre_heat
  - trigger: state
    entity_id: sensor.defi_hilo
    to: reduction
    id: defi_reduction
  - trigger: state
    entity_id: sensor.defi_hilo
    to: recovery
    id: defi_recovery
  - trigger: state
    entity_id: sensor.defi_hilo
    to: appreciation
    id: defi_appreciation
  - trigger: state
    entity_id: sensor.defi_hilo
    to: completed
    id: defi_completed
  - trigger: template
    value_template: >
      {{ now() >= as_datetime(states('appreciation_time')) }}
    id: appreciation_time_reached
  - trigger: template
    value_template: >
      {{ now() >= as_datetime(states('pre_heat_time')) }}
    id: pre_heat_time_reached
  - trigger: template
    value_template: >
      {{ now() >= as_datetime(states('reduction_time')) }}
    id: reduction_time_reached
  - trigger: template
    value_template: >
      {{ now() >= as_datetime(states('recovery_time')) }}
    id: recovery_time_reached
  - trigger: template
    value_template: >
      {{ now() >= as_datetime(states('completed_time')) }}
    id: completed_time_reached
actions:
  - choose:
      - conditions:
          - condition: trigger
            id: defi_scheduled
        sequence:
          - variables:
              appreciation_time: "{{ state_attr('sensor.defi_hilo', 'next_events')[0].phases.appreciation_start | as_datetime }}"
              pre_heat_time: "{{ state_attr('sensor.defi_hilo', 'next_events')[0].phases.preheat_start | as_datetime }}"
              reduction_time: "{{ state_attr('sensor.defi_hilo', 'next_events')[0].phases.reduction_start | as_datetime }}"
              recovery_time: "{{ state_attr('sensor.defi_hilo', 'next_events')[0].phases.recovery_start | as_datetime }}" 
              completed_time: "{{ state_attr('sensor.defi_hilo', 'next_events')[0].phases.recovery_end | as_datetime }}"         
      - conditions:
          - condition: trigger
            id: defi_pre_heat
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_pre_heat_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_pre_heat_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_pre_heat_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_pre_heat_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_pre_heat_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_reduction
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_reduction_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_reduction_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_reduction_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_reduction_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_reduction_state].state | int}}"
            target: !input thermostats_defi
          - choose:
            - conditions:
                - "{{ switchs_defi is defined | lenght > 0 }}"
              action: switch.turn_off
              target: !input switchs_defi
          - choose:
            - conditions:
                - "{{ lights_defi is defined | lenght > 0 }}"
              action: light.turn_off
              target: !input lights_defi
          - choose:
            - conditions:
                - "{{ fans_defi is defined | lenght > 0 }}"
              action: fan.turn_off
              target: !input fans_defi
      - conditions:
          - condition: trigger
            id: defi_recovery
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_recovery_state }}"
            target: !input thermostats_defi
          - choose:
            - conditions:
                - "{{ switchs_defi is defined | lenght > 0 }}"
              action: switch.turn_on
              target: !input switchs_defi
          - choose:
            - conditions:
                - "{{ lights_defi is defined | lenght > 0 }}"
              action: light.turn_on
              target: !input lights_defi
          - choose:
            - conditions:
                - "{{ fans_defi is defined | lenght > 0 }}"
              action: fan.turn_on
      - conditions:
          - condition: trigger
            id: defi_recovery_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_recovery_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_recovery_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_recovery_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_appreciation
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_appreciation_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_apprication_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_appreciation_state].state | int}}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_apprication_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_appreciation_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_completed
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_completed_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_completed_time
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ states[temperature_completed_state].state | int}}"
            target: !input thermostats_defi
